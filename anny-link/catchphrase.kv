#:kivy 1.8.0
#:import BoxLayout kivy.uix.boxlayout.BoxLayout
#:import TextInput kivy.uix.textinput.TextInput
#:import Label kivy.uix.label.Label
#:import Button kivy.uix.button.Button
#:import CoreLabel kivy.core.text.Label
#:import Popup kivy.uix.popup.Popup
#:import text_strings text_strings
#:import browser browser
<MyScreenManager>:
#    LoginScreen:
#    GameChooserScreen:
#    MakeGameScreen:
#    SelectWordsListScreen:
#    JoinGameScreen:
#    GameLobbyScreen:
#    GameScreen:
#    ManageWordListsScreen:
#    WordListViewScreen:
<SelectWordsListScreen>:

<JoinGameScreen>:
    game_name_input: join_game_id_input
    #middle_space: .7
#    name: 'join game'
    BoxLayout:
        orientation: 'vertical'
        Label:
        TextInput:
            id: join_game_id_input
            hint_text: "Game Name"
            size_hint_y: None
            #size_hint_x: None
            height: "32dp"
            multiline: False
            #width: self.parent.width * root.middle_space
            #pos: [(self.parent.size[0] - self.size[0]) / 2, self.pos[1]]
            on_text_validate: root.join()
        Label:
#        BoxLayout
#            size_hint_y: .8
#            Label:
#                text: 'Enter Game Name:'
#            TextInput:
#                id: join_game_id_input
#                multiline: False
        BoxLayout:
            height: self.parent.height * .2
            size_hint_y: None
            Button:
#                size_hint_y: None
#                height: self.parent.height * .2
                text: 'Join Game (Score Keeper)'
                on_release:root.join_observer()
            Button:
#                size_hint_y: None
#                height: self.parent.height * .2
                text: 'Join Game'
                on_release: root.join()

<ScoreLabel>:
    team_label: team_label_kv
    score_label: score_label_kv
    size_hint_x: None
    width: "100dp"
    canvas.after:
        Color:
            rgba: 1,1,1,.35
        Line:
            points: [self.right, self.top, self.right, self.y]
        Line:
            points: [self.x, self.top, self.x, self.y]
    Label:
        size_hint_x: .1
    BoxLayout:
        orientation: "vertical"
        Button:
            size_hint_y: .25
            text: "^"
            on_release: app.lobby.callRemote("notify", root.e.ScoreIncreaseRequestEvent(root.team_id))
        Label:
            size_hint_y: .25
            id: team_label_kv
            valign: "bottom"
        Label
            size_hint_y: .25
            id: score_label_kv
            valign: "top"
        Button:
            text: "v"
            size_hint_y: .25
            on_release: app.lobby.callRemote("notify", root.e.ScoreDecreaseRequestEvent(root.team_id)) #root.score -= 1
    Label:
        size_hint_x: .1
<GameScreen>:
#    name: 'game'
    players_turn_label: display_name
    word_label: word_box
    bottom_buttons: buttons
    time_label: timer
    scores_scroll_view: scores_scroll_view_kv
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            id: scores_scroll_view_kv
            size_hint_y: .2

        Label:
            size_hint_y: .1
            id: display_name
            text: "Current Turn: "
        Label:
            size_hint_y: .4
            id: word_box
            text: "Not Your Turn"

        Label:
            size_hint_y: .1
            id: timer
            text: ""
        BoxLayout:
            size_hint_y: .2
            id: buttons

#<GameScreen>:
##    name: 'game'
#    players_turn_label: display_name
#    word_label: word_box
#    bottom_buttons: buttons
#    time_label: timer
#    scores_label: score
#    BoxLayout:
#        orientation: 'vertical'
#        BoxLayout:
#            size_hint_y: .4
#            Label:
#                id: display_name
#                text: "Current Turn: "
#            Label:
#                id: score
#        BoxLayout:
#            size_hint_y: .4
#            Label:
#                id: word_box
#                text: "Not Your Turn"
#            Label:
#                id: timer
#                text: ""
#        BoxLayout:
#            size_hint_y: .2
#            id: buttons

<GameLobbyScreen>:
#    name: 'game lobby'
    view_label: player_view_label
    view_list: player_view_list
    pointing_to_spinner: player_pointing_to
    number_sharing_device_spinner: number_sharing_device_spinner_kv
    interactive_half: interactive_half_kv
    #overall layout
    BoxLayout:
        orientation: 'vertical'
        #top lists
        BoxLayout:
            #status view
            BoxLayout:
                orientation: 'vertical'
                Label:
                    id: player_view_label
                    size_hint_y: .1
                    text: "" if root.waiting_is_empty else "Waiting on:"
                ListView:
                    id: player_view_list
            #Player that I "hand" device to
            BoxLayout:
                id: interactive_half_kv
                orientation: 'vertical'
                Label:
                    size_hint_y: None
                    text: 'Player after me:'
                    height: self.parent.height * .1 if self.parent else 100
                Spinner:
                    size_hint_y: None
                    height: root.SPINNER_HEIGHT
                    id: player_pointing_to
                    text: "Player After Me"
                    values: tuple()
                Label:
                    text: ""
                    size_hint_y: .5
                Label:
                    size_hint_y: None
                    height: self.parent.height * .1 if self.parent else 100
                    text: "number of people sharing device"
                Spinner:
                    id: number_sharing_device_spinner_kv
                    size_hint_y: None
                    height: root.SPINNER_HEIGHT
                    text: "1"
                    values: [str(i+1) for i in range(12)]
                Label:
                    text: ""

        #bottom buttons
        Button:
            size_hint_y: .2
            text: 'Start'
            on_release: root.submit_start_game_request()


<GameChooserScreen>:
#    name: 'game chooser'
    GridLayout:
        cols: 1
        spacing: "1dp"
        orientation: 'vertical'
        Button:
            text: 'Make Game'
            on_release:
                app.root.switch_to('make game')
                app.root.current_screen.get_unique_game_id()#WAITING ISSUE?
        Button:
            text: 'Join Game'
            on_release: app.root.switch_to('join game')
        Button:
            text: 'Manage Word Lists'
            on_release: app.root.switch_to('manage word lists')

        Button:
            text: 'View Server Word Lists'
            on_release: root.download_from_server()
<ManageWordListsScreen>
    list_label: list_label_kv
    new_list_okay: new_list_okay_kv.__self__
    new_list_not_okay: new_list_not_okay_kv.__self__
    scroll_view: scroll_view_kv
    new_list_box: new_list_kv
#    name: 'manage word lists'
    BoxLayout:
        #Note. The layout is not as defined below
        #I used kv-lang to make buttons so I woudn't
        #have to bind everything, then use their id's
        #and place them appropriatley in my python class
        orientation: 'vertical'
        Label:
            id: list_label_kv
            size_hint_y: .1
            text_size: self.text_size[0], self.size[1]
            text: 'Lists:'
#        Button:
#            size_hint_y: .05
#            text: "help"
#            on_release:
#                root.help()
        ScrollView:
            size_hint_y: .7
            id: scroll_view_kv

        BoxLayout:
            size_hint_y: .2
            id: new_list_kv
            Button:
                id: new_list_okay_kv
                text: "Make New List"
                on_release: app.root.switch_to("make word list")
            PremiumLabel:
                id: new_list_not_okay_kv
                canvas.after:
                    Color:
                        rgba: (1,1,1,.5)
                    Rectangle:
                        size: self.size
                        pos: self.pos
                text: "Make New List"

<WordListViewerScreen>:
    #name: 'word list viewer'
    words_list_view: words_list_view_kv
    BoxLayout:
        orientation: "vertical"
        ListView:
            size_hint_y: 1
            id: words_list_view_kv

<MakeWordListFromUrlPopupConcents>:

<MakeWordListScreen>:
#    name: 'make word list'
    #word_list_name: None # for use by SelectWordsListScreen
    name_text_input: name_text_input
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            MultiLineLabel:
                text: text_strings.url_instructions
        GridLayout:
            cols: 3
            size_hint_y: None
            height: "32dp"
            TextInput:
                size_hint_y: None
                height: "32dp"
                id: name_text_input
                multiline: False
                text: ""
                hint_text: 'name of list'
                size_hint_x: .2
            TextInput:
                size_hint_x: .6
                text: ""
                id: url_text_input
                multiline: False
                hint_text: 'Enter Url'
                on_text_validate: root.add_word_list(name_text_input.text,url_text_input.text)
                on_focus:
                    #if args[1]: app.generic_popup(text_strings.url_instructions, paragraph=True)
            Button:
                text: 'submit'
                size_hint_x: .2
                on_press: app.loading_popup()
                on_release: root.add_word_list(name_text_input.text,url_text_input.text)#blocking call,causes
        Label:
        BoxLayout:
            size_hint_y: None
            height: self.parent.height * .2
            Button:
                text:"Download from server"
                on_release: root.download_from_server()
            Button:
                #size_hint_x: .4
                text: "make locally"
                on_release: root.make_list_locally(name_text_input.text, [])

#<MakeWordListScreen>:
#    name: 'make word list'
#    #word_list_name: None # for use by SelectWordsListScreen
#    name_text_input: name_text_input
#    BoxLayout:
#        orientation: 'vertical'
#        Label:
#        TextInput:
#            size_hint_y: None
#            height: "32dp"
#            id: name_text_input
#            multiline: False
#            text: ""
#            hint_text: 'name of list'
#        Label:
#        BoxLayout:
#            size_hint_y: None
#            height: "32dp"
#            TextInput:
#                #size_hint_x: .55
#                text: ""
#
#                id: url_text_input
#                multiline: False
#                hint_text: 'Enter Url'
#                on_text_validate: root.add_word_list(name_text_input.text,url_text_input.text)
#                on_focus:
#                    if args[1]: app.generic_popup(text_strings.url_instructions, paragraph=True)
#            Button:
#                text:"Download from server"
#                on_release: root.download_from_server()
#            Button:
#                #size_hint_x: .4
#                text: "make locally"
#                on_release: root.make_list_locally(name_text_input.text, [])
#        Label:
#        Button:
#            size_hint_y: None
#            height: root.height * .2
#            text: 'submit'
#            on_press: app.loading_popup()
#            on_release: root.add_word_list(name_text_input.text,url_text_input.text)#blocking call,causes


<MySpacer@Label>:
    size_hint_y:None
    height: "25dp"
<MyButton@Button>:
    size_hint_y: None
    height: "32dp"
<MyLabel@Label>:
    size_hint_y: None
    height: "25dp"
<MyTextInput@TextInput>:
    size_hint_y: None
    height: "32dp"
    multiline: False

<MakeGameScreen>:
#    name: 'make game'
    scroll_layout: scroll_layout_kv
    #grid_layout: grid_layout_kv
    #unique_game_id: make_game_id_input
    middle_space: .9
    BoxLayout:
        orientation: "vertical"
        ScrollView:
            size_hint_y: .8
            size_hint_x:None
            width: self.parent.width * root.middle_space
            pos: [self.parent.width*(1-root.middle_space)/2, self.pos[1]]
            id: scroll_layout_kv
        Button:
            size_hint_y: .2
            text: "Make Game"
            on_release: root.make_and_join_game()

<MakeGameScreenContents>:
    game_name_text_input: make_game_id_input
    score_system_button: score_system_button_kv
    leeway_time: leeway_time_kv
    round_length: round_length_kv
    size_hint_y: None
    select_word_list_button: select_word_list_button_kv
    cols: 1
    MyLabel:
        text: "Game Name"
    MyTextInput:
        id: make_game_id_input
        text: "Getting Unique Game ID"
    MySpacer:
    MyLabel:
        text: "select word list"
    MyButton:
        id: select_word_list_button_kv
        text: "no list selected"
        on_release:
            popup_content = BoxLayout()
            local_list_btn = Button(text="local list")
            server_list_btn = Button(text="server list")
            make_game_screen = root.parent.parent
            local_list_btn.bind(on_release=app.root.current_screen.local_list)
            server_list_btn.bind(on_release=app.root.current_screen.server_list)
            popup_content.add_widget(local_list_btn)
            popup_content.add_widget(server_list_btn)
            app.root.current_screen.popup = Popup(title='Please choose',
            size_hint=(1,.25),
            auto_dismiss = False,
            content=popup_content
            )
            app.root.current_screen.popup.open()
    MySpacer:
    MyLabel:
        text: "round length"
    Widget:
        size_hint_y: None
        height: "32dp"
        MyTextInput:
            id: round_length_kv
            size_hint_x:None
            center_x: self.parent.width/2
            y: self.parent.y
            width: "50dp"
            text: "120"
            #on_focus: root.check_is_int(args[0], args[1], "120")
    MySpacer:
    MyLabel:
        text: "Leeway Time"
    Widget:
        size_hint_y: None
        height: "32dp"
        MyTextInput:
            id: leeway_time_kv
            size_hint_x: None
            center_x: self.parent.width/2
            y: self.parent.y
            width: "50dp"
            text: "0"
            #on_focus: root.check_is_int(args[0], args[1], "0")

    MySpacer:
    MyLabel:
        text: "Score System"
    MyButton:
        id: score_system_button_kv
        text: "2 teams"
        on_release: app.root.current_screen.score_system()

<MakeGameScreenScoreSystemPopupContent>
    the_widgets: the_widgets_kv.__self__
    teams_button: teams_button_kv
    individuals_button: individuals_button_kv
    orientation: "vertical"
    Label:
        text: "Score System"
        size_hint_y: .1
    BoxLayout:
        size_hint_y: .3
        ToggleButton:
            id: teams_button_kv
            text: "Teams"
            group: "group"
            #state: "down" if app.root.current_screen.score_system_mode == app.root.current_screen.TEAM_SCORE_SYSTEM else "normal"
            on_state:
                if args[1] == 'down': num_teams_kv.clear_widgets()
                if args[1] == 'down': num_teams_kv.add_widget(the_widgets_kv)
                if args[1] == 'down': root.score_system = app.root.current_screen.TEAM_SCORE_SYSTEM
        ToggleButton:
            id: individuals_button_kv
            text: "Individuals"
            group: "group"
            #state: "down" if app.root.current_screen.score_system_mode == app.root.current_screen.INDIVIDUAL_SCORE_SYSTEM else "normal"
            on_state:
                if args[1] == 'down': num_teams_kv.clear_widgets()
                if args[1] == 'down': num_teams_kv.add_widget(Label())
                if args[1] == 'down': root.score_system = app.root.current_screen.INDIVIDUAL_SCORE_SYSTEM

    BoxLayout:
        size_hint_y: .3
        id: num_teams_kv
        BoxLayout:
            orientation: "vertical"
            id: the_widgets_kv
            Label:
                text: "Number of Players"
            Spinner:
                text: str(app.root.current_screen.number_of_teams)
                values: [str(i+2) for i in range(11)]
                on_text: root.number_of_teams = int(args[1])
    Label:
        size_hint_y: .1
    Button:
        size_hint_y: .2
        text: "Done"
        on_release:
            app.root.current_screen.score_system_mode = root.score_system
            app.root.current_screen.number_of_teams = root.number_of_teams
            popup = self.parent.parent.parent.parent
            popup.dismiss()
            app.root.current_screen.popup = None
#        BoxLayout:
#            size_hint_y: .4
#            orientation: 'horizontal'
#            Label:
#                text: 'Game ID'
#            TextInput:
#                id: make_game_id_input
#                multiline: False
#                text: "Getting Unique Game ID"
#        BoxLayout:
#            size_hint_y: .4
#            orientation: 'horizontal'
#            Label:
#                text: 'Selected Word List: ' + root.word_list_name
#            Button:
#                on_release: root.server_list()
#                text: 'Server Word List'
#            Button:
#                text: 'My Word List'
#                on_release: root.local_list()
#        Button:
#            size_hint_y: .2
#            text: 'Make Game'
#            on_release: root.make_and_join_game()



<WordListEditor>:
    scroll_view: scroll_view_kv
    #save_name_input: save_name_input_kv
    new_word_input: new_word_input_kv
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            size_hint_y: .6
            id: scroll_view_kv
        BoxLayout:
            size_hint_y: .1
            TextInput:
                id: new_word_input_kv
                size_hint_x: .8
                hint_text: "add word"
                text: ""
                on_text_validate: root.add_word(new_word_input_kv.text)
                multiline: False
            Button:
                size_hint_x: .2
                text: "submit"
                on_release: root.add_word(new_word_input_kv.text)
#        BoxLayout:
#            #TODO make input popup
#            size_hint_y: .1
#            Label:
#                text:"save name:"
#                size_hint_x: None
#                width: self.texture_size[0]
#            TextInput:
#                id: save_name_input_kv
#                text: ""
        Button:
            size_hint_y: .2
            text: 'Save'
            on_release: root.save()

<MiddleTextInput@TextInput>:
    padding_x: [self.width/2]
    on_text:
        my_label = CoreLabel()
        my_label.text = self.text
        my_label.font_name = self.font_name
        my_label.font_size = self.font_size
        print self.font_size
        my_label.refresh()
        self.padding = [self.width/2 - my_label.size[0]/2, 6, self.width/2 - my_label.size[0]/2, 6]

<MyMiddleButton@Button>
    width: self.parent.width * .5
    pos: [(self.parent.size[0] - self.size[0]) / 2, self.pos[1]]


<LoginScreen>:
#    name: 'login'
    middle_space: .7
    BoxLayout:
        orientation: "vertical"
        Label:
            text:"LOGO"
        BoxLayout:
            size_hint_x: None
            width: self.parent.width * .7
            pos: [(self.parent.size[0] - self.size[0]) / 2, self.pos[1]]
            size_hint_y: None
            height: "32dp"
            TextInput:
                id: login_text_input
                hint_text: "nickname"
                size_hint_y: None
                size_hint_x: None
                width: "50dp"
                height: "32dp"
                multiline: False
                width: self.parent.width - char_len.width
                on_text: char_len.text = str(len(self.text))
                on_text_validate: root.login(self.text)# reminant of password
            Label:
                size_hint_x: None
                width: "30dp"
                id: char_len
        Label:
            text: ""
            size_hint_y: None
            height: "10dp"

        Button:
            text: "login"
            height: "48dp"
            size_hint: None,None
            width: self.parent.width * .7
            on_release: root.login(login_text_input.text)
            pos: [(self.parent.size[0] - self.size[0]) / 2, self.pos[1]]

        Label:
            text: ""

        BoxLayout:
            orientation: "horizontal"
            size_hint_y: None
            height: self.parent.height * .2
            Button:
                text: "About"
                on_release: app.generic_popup(text_strings.about, paragraph=True, popup_size_hint_y = 1)
            Button:
                text: "upgrade"
                on_release: browser.open_url('http://play.google.com/store/apps/details?id=com.google.android.apps.maps') 

#        orientation: 'vertical'
#        BoxLayout:
#            size_hint_y: .4
#            # height: self.parent.height * .4
#            orientation: 'horizontal'
#            Label:
#                text: 'Nickname:'
#            TextInput:
#                id: username_input
#                text: 'default'
#                multiline: False
#                on_text_validate: root.login(self.text, "")
#
#        BoxLayout:
#            size_hint_y: .4
#            #height: self.parent.height * .4
#            orientation: 'horizontal'
#            Label:
#                text: 'Optional Password:'
#            TextInput:
#                id: password_input
#                multiline: False
#                password: True
#
#        Button:
#            size_hint_y: .2
#            #height: self.parent.height * .2
#            on_release: root.login(username_input.text, password_input.text)
#            text: 'login:'




